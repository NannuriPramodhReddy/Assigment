package com.example.service;

import com.example.model.*;
import com.example.repository.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.time.LocalDateTime;
import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class ScanService {
    private final ContainerImageRepository imageRepo;
    private final VulnerabilityRepository vulnRepo;
    private final ScanResultRepository scanRepo;

    @Transactional
    public ScanResult scanImage(String imageId) {
        ContainerImage image = imageRepo.findById(imageId)
                .orElseThrow(() -> {
                    log.error("Image not found with ID: {}", imageId);
                    return new RuntimeException("Image not found with ID: " + imageId);
                });

        ScanResult result = ScanResult.builder()
                .imageId(imageId)
                .status(ScanResult.ScanStatus.IN_PROGRESS)
                .build();

        try {
            List<Vulnerability> vulnerabilities = vulnRepo.findByAffectedPackageContaining(image.getImageName());
            
            result = result.toBuilder()
                    .vulnerabilities(vulnerabilities)
                    .status(ScanResult.ScanStatus.COMPLETED)
                    .scannerVersion("1.0.0")
                    .criticalCount(countVulnsBySeverity(vulnerabilities, Vulnerability.SeverityLevel.CRITICAL))
                    .highCount(countVulnsBySeverity(vulnerabilities, Vulnerability.SeverityLevel.HIGH))
                    .mediumCount(countVulnsBySeverity(vulnerabilities, Vulnerability.SeverityLevel.MEDIUM))
                    .lowCount(countVulnsBySeverity(vulnerabilities, Vulnerability.SeverityLevel.LOW))
                    .build();
                    
        } catch (Exception e) {
            log.error("Scan failed for image: {}", imageId, e);
            result = result.toBuilder()
                    .status(ScanResult.ScanStatus.FAILED)
                    .build();
            throw new RuntimeException("Scan failed for image: " + imageId, e);
        }
        
        return scanRepo.save(result);
    }

    // Add this method to get scan results by ID
    public ScanResult getScanResult(String scanId) {
        return scanRepo.findById(scanId)
                .orElseThrow(() -> {
                    log.error("Scan result not found with ID: {}", scanId);
                    return new RuntimeException("Scan result not found with ID: " + scanId);
                });
    }

    // Add this method to get all scans for an image
    public List<ScanResult> getScanResultsForImage(String imageId) {
        return scanRepo.findByImageIdOrderByScanDateDesc(imageId);
    }

    private int countVulnsBySeverity(List<Vulnerability> vulnerabilities, 
                                   Vulnerability.SeverityLevel severity) {
        if (vulnerabilities == null) {
            return 0;
        }
        return (int) vulnerabilities.stream()
                .filter(v -> v != null && v.getSeverity() == severity)
                .count();
    }
}